
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nluwegaxtjekbpccjuxt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5sdXdlZ2F4dGpla2JwY2NqdXh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NDQxMzEsImV4cCI6MjA1NjEyMDEzMX0.ZEE901-T8RfG8JVY5Q5umChmaZpmDM9BRpE3db8s5YQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'studyfin-auth-storage',
  },
  global: {
    headers: {
      'x-client-info': 'studyfin-web-app'
    },
  },
});

/**
 * Check if the Supabase connection is working
 * @param silent - If true, will not log errors to console
 * @returns Promise<boolean> - True if connection is working, false otherwise
 */
export const checkSupabaseConnection = async (silent: boolean = false): Promise<boolean> => {
  try {
    // Use a simple health check instead of a table query
    // This checks the connection without requiring specific table permissions
    const { error } = await supabase.from('jobs').select('id').limit(1);
    
    if (error) {
      if (!silent) {
        console.error("Supabase connection check failed:", error.message || error);
      }
      return false;
    }
    
    return true;
  } catch (error) {
    if (!silent) {
      console.error("Exception during Supabase connection check:", error);
    }
    return false;
  }
};

/**
 * Attempts to reset the Supabase connection and retry
 * @returns Promise<boolean> - True if connection was restored, false otherwise
 */
export const resetConnectionAndRetry = async (): Promise<boolean> => {
  try {
    console.log("Attempting to reset Supabase connection...");
    
    // Clear any cached auth session
    await supabase.auth.signOut({ scope: 'local' });
    
    // Clear local storage items related to Supabase
    try {
      const storageKeys = [
        'studyfin-auth-storage',
        'supabase.auth.token',
        'sb-nluwegaxtjekbpccjuxt-auth-token',
        'supabase.auth.refreshToken'
      ];
      
      for (const key of storageKeys) {
        localStorage.removeItem(key);
      }
    } catch (e) {
      console.log("Error clearing local storage:", e);
    }
    
    // Force reconnection by creating a temporary client
    const tempClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
    const { error } = await tempClient.from('jobs').select('id').limit(1);
    if (error) {
      console.error("Failed to connect with temporary client:", error.message || error);
    }
    
    // Wait a moment before trying again with the main client
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Try a simple query to test connection
    const connected = await checkSupabaseConnection();
    
    if (connected) {
      console.log("Supabase connection successfully reset");
    } else {
      console.error("Failed to reset Supabase connection");
    }
    
    return connected;
  } catch (error) {
    console.error("Error resetting Supabase connection:", error);
    return false;
  }
};

/**
 * Attempts to get the current auth session
 * @param silent - If true, will not log errors to console
 * @returns Promise<Session | null> - Current session or null if not authenticated
 */
export const getCurrentSession = async (silent: boolean = false) => {
  try {
    const { data, error } = await supabase.auth.getSession();
    
    if (error && !silent) {
      console.error("Error getting session:", error.message);
      return null;
    }
    
    return data.session;
  } catch (error) {
    if (!silent) {
      console.error("Exception getting session:", error);
    }
    return null;
  }
};
